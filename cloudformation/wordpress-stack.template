AWSTemplateFormatVersion: 2010-09-09
Description: Multi-AZ Wordpress Architercture, with RDS, EFS, behind an application load balancer with an auto-scaling group.

Mappings:
  RegionMap:
    us-east-1:
      'AMI': 'ami-09d3b3274b6c5d4aa'
      'PEM': 'mhellnerdev-us-east-kp'
    us-west-1:
      'AMI': 'ami-017c001a88dd93847'
      'PEM': 'mhellnerdev-us-west-kp'
    us-west-2:
      'AMI': 'ami-0d593311db5abb72b'
      'PEM': 'mhellner-us-west2-kp'

# Parameters section
Parameters:
  WordpressDomainName:
    Description: Please enter the Route53 Hosted Zone you would like to assign to this stack. This must exist in your AWS account. This action will install an ACM Certificate via means of DNS validation.
    Type: String
    Default: example.com

  WordpressDBUsername:
    Description: Please enter the admin username the RDS instance will use for the created database. This is the username that will be used during setup of wordpress front-end.
    Type: String
    Default: dbadmin

  WordpressDBPassword:
    Description: Please enter the admin password the RDS instance will use for the created database. This is the password that will be used during setup of wordpress front-end. THIS PASSWORD MUST BE 8 OR MORE CHARACTERS.
    Type: String
    NoEcho: true
    Default: dbadmin1234

  WordpressVpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16

  WordpressPublicSubnetAz1CIDR:
    Description: Please enter the IP range (CIDR notation) for the Public Subnet for Availability Zone 1
    Type: String
    Default: 10.0.0.0/24

  WordpressPublicSubnetAz2CIDR:
    Description: Please enter the IP range (CIDR notation) for the Public Subnet for Availability Zone 2
    Type: String
    Default: 10.0.1.0/24

  WordpressPrivateAppSubnetAz1CIDR:
    Description: Please enter the IP range (CIDR notation) for the Private App Subnet for Availability Zone 1
    Type: String
    Default: 10.0.2.0/24

  WordpressPrivateAppSubnetAz2CIDR:
    Description: Please enter the IP range (CIDR notation) for the Private App Subnet for Availability Zone 2
    Type: String
    Default: 10.0.3.0/24

  WordpressPrivateDataSubnetAz1CIDR:
    Description: Please enter the IP range (CIDR notation) for the Private Data Subnet for Availability Zone 1
    Type: String
    Default: 10.0.4.0/24

  WordpressPrivateDataSubnetAz2CIDR:
    Description: Please enter the IP range (CIDR notation) for the Private Data Subnet for Availability Zone 2
    Type: String
    Default: 10.0.5.0/24

# Resources Section
Resources:
  # ACM TLS Cert
  WordpressProdCert:
    Type: AWS: :CertificateManager: :Certificate
    Properties:
      DomainName: !Ref WordpressDomainName
      SubjectAlternativeNames:
        - !Sub '*.${WordpressDomainName
}'
      # DomainValidationOptions:
      #   - DomainName: !Ref WordpressDomainName
      #     HostedZoneId: Z08384311A2NCJV4Q259B
      ValidationMethod: DNS
  # VPC Description
  WordpressProdVpc:
    Type: AWS: :EC2: :VPC
    Properties:
      CidrBlock: !Ref WordpressVpcCIDR
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
      InstanceTenancy: 'default'
      Tags:
        - Key: Name
          Value: Wordpress Prod VPC
        - Key: Project
          Value: Wordpress-Prod

  # Internet Gateway
  WordpressProdIGW:
    Type: AWS: :EC2: :InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Wordpress Prod IGW
        - Key: Project
          Value: Wordpress Prod

  WordpressProdIGWAttachment:
    Type: AWS: :EC2: :VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref WordpressProdIGW
      VpcId: !Ref WordpressProdVpc

  # Public Subnets
  WordpressProdPublicSubnet1:
    Type: AWS: :EC2: :Subnet
    Properties:
      VpcId: !Ref WordpressProdVpc
      AvailabilityZone: !Select [
  0, !GetAZs ''
]
      CidrBlock: !Ref WordpressPublicSubnetAz1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Wordpress Prod Public Subnet AZ1
        - Key: Project
          Value: Wordpress Prod

  WordpressProdPublicSubnet2:
    Type: AWS: :EC2: :Subnet
    Properties:
      VpcId: !Ref WordpressProdVpc
      AvailabilityZone: !Select [
  1, !GetAZs ''
]
      CidrBlock: !Ref WordpressPublicSubnetAz2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Wordpress Prod Public Subnet AZ2
        - Key: Project
          Value: Wordpress Prod

  # Private App Subnets
  WordpressProdPrivateAppSubnet1:
    Type: AWS: :EC2: :Subnet
    Properties:
      VpcId: !Ref WordpressProdVpc
      AvailabilityZone: !Select [
  0, !GetAZs ''
]
      CidrBlock: !Ref WordpressPrivateAppSubnetAz1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Wordpress Prod Private App Subnet AZ1
        - Key: Project
          Value: Wordpress Prod

  WordpressProdPrivateAppSubnet2:
    Type: AWS: :EC2: :Subnet
    Properties:
      VpcId: !Ref WordpressProdVpc
      AvailabilityZone: !Select [
  1, !GetAZs ''
]
      CidrBlock: !Ref WordpressPrivateAppSubnetAz2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Wordpress Prod Private App Subnet AZ2
        - Key: Project
          Value: Wordpress Prod

  # Private Data subnets. This is where NFS will live.
  WordpressProdPrivateDataSubnet1:
    Type: AWS: :EC2: :Subnet
    Properties:
      VpcId: !Ref WordpressProdVpc
      AvailabilityZone: !Select [
  0, !GetAZs ''
]
      CidrBlock: !Ref WordpressPrivateDataSubnetAz1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Wordpress Prod Private Data Subnet AZ1
        - Key: Project
          Value: Wordpress Prod

  WordpressProdPrivateDataSubnet2:
    Type: AWS: :EC2: :Subnet
    Properties:
      VpcId: !Ref WordpressProdVpc
      AvailabilityZone: !Select [
  1, !GetAZs ''
]
      CidrBlock: !Ref WordpressPrivateDataSubnetAz2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Wordpress Prod Private Data Subnet AZ2
        - Key: Project
          Value: Wordpress Prod

  # Elastic IP's
  WordpressProdNgw1Eip:
    Type: AWS: :EC2: :EIP
    DependsOn: WordpressProdIGWAttachment
    Properties:
      Domain: vpc

  WordpressProdNgw2Eip:
    Type: AWS: :EC2: :EIP
    DependsOn: WordpressProdIGWAttachment
    Properties:
      Domain: vpc

  # NAT Gateways
  WordpressProdNgw1:
    Type: AWS: :EC2: :NatGateway
    Properties:
      AllocationId: !GetAtt WordpressProdNgw1Eip.AllocationId
      SubnetId: !Ref WordpressProdPublicSubnet1

  WordpressProdNgw2:
    Type: AWS: :EC2: :NatGateway
    Properties:
      AllocationId: !GetAtt WordpressProdNgw2Eip.AllocationId
      SubnetId: !Ref WordpressProdPublicSubnet2

  # Public Route Table
  WordpressProdPublicRouteTable:
    Type: AWS: :EC2: :RouteTable
    Properties:
      VpcId: !Ref WordpressProdVpc
      Tags:
        - Key: Name
          Value: Wordpress Prod Public Routes

  WordpressProdPublicRoute:
    Type: AWS: :EC2: :Route
    DependsOn: WordpressProdIGWAttachment
    Properties:
      RouteTableId: !Ref WordpressProdPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref WordpressProdIGW

  WordpressProdPublicSubnet1RouteTableAssociation:
    Type: AWS: :EC2: :SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref WordpressProdPublicRouteTable
      SubnetId: !Ref WordpressProdPublicSubnet1

  WordpressProdPublicSubnet2RouteTableAssociation:
    Type: AWS: :EC2: :SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref WordpressProdPublicRouteTable
      SubnetId: !Ref WordpressProdPublicSubnet2

  # Private Route Table 1
  WordpressProdPrivateRouteTable1:
    Type: AWS: :EC2: :RouteTable
    Properties:
      VpcId: !Ref WordpressProdVpc
      Tags:
        - Key: Name
          Value: Wordpress Prod Private Routes AZ1

  # Associate NAT Gateway 1 with App Route 1
  WordpressProdPrivateAppRoute1:
    Type: AWS: :EC2: :Route
    Properties:
      RouteTableId: !Ref WordpressProdPrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref WordpressProdNgw1

  # Associate App and Data Subnets
  WordpressProdPrivateAppSubnet1RouteTableAssociation:
    Type: AWS: :EC2: :SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref WordpressProdPrivateRouteTable1
      SubnetId: !Ref WordpressProdPrivateAppSubnet1

  WordpressProdPrivateDataSubnet1RouteTableAssociation:
    Type: AWS: :EC2: :SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref WordpressProdPrivateRouteTable1
      SubnetId: !Ref WordpressProdPrivateDataSubnet1

  # Private Route Table 2
  WordpressProdPrivateRouteTable2:
    Type: AWS: :EC2: :RouteTable
    Properties:
      VpcId: !Ref WordpressProdVpc
      Tags:
        - Key: Name
          Value: Wordpress Prod Private Routes AZ2

  # Associate NAT Gateway with App route 2
  WordpressProdPrivateAppRoute2:
    Type: AWS: :EC2: :Route
    Properties:
      RouteTableId: !Ref WordpressProdPrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref WordpressProdNgw2

  # Associate App and Data subnets
  WordpressProdPrivateAppSubnet2RouteTableAssociation:
    Type: AWS: :EC2: :SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref WordpressProdPrivateRouteTable2
      SubnetId: !Ref WordpressProdPrivateAppSubnet2

  WordpressProdPrivateDataSubnet2RouteTableAssociation:
    Type: AWS: :EC2: :SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref WordpressProdPrivateRouteTable2
      SubnetId: !Ref WordpressProdPrivateDataSubnet2

  # Security Groups
  WordpressProdSSHSecurityGroup:
    Type: AWS: :EC2: :SecurityGroup
    Properties:
      GroupName: Wordpress Prod SSH Security Group
      GroupDescription: Wordpress Prod SSH Security Group
      VpcId: !Ref WordpressProdVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Wordpress Prod SSH Security Group
        - Key: Project
          Value: Wordpress Prod

  WordpressProdALBSecurityGroup:
    Type: AWS: :EC2: :SecurityGroup
    Properties:
      GroupName: Wordpress Prod ALB Security Group
      GroupDescription: Wordpress ALB Security Group
      VpcId: !Ref WordpressProdVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Wordpress Prod ALB Security Group
        - Key: Project
          Value: Wordpress Prod

  WordpressProdWebserverSecurityGroup:
    Type: AWS: :EC2: :SecurityGroup
    Properties:
      GroupName: Wordpress Prod Webserver Security Group
      GroupDescription: Wordpress Webserver Security Group
      VpcId: !Ref WordpressProdVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref WordpressProdALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref WordpressProdALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref WordpressProdSSHSecurityGroup
      Tags:
        - Key: Name
          Value: Wordpress Prod Webserver Security Group
        - Key: Project
          Value: Wordpress Prod

  WordpressProdDatabaseSecurityGroup:
    Type: AWS: :EC2: :SecurityGroup
    Properties:
      GroupName: Wordpress Prod Database Security Group
      GroupDescription: Wordpress Database Security Group
      VpcId: !Ref WordpressProdVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref WordpressProdWebserverSecurityGroup
      Tags:
        - Key: Name
          Value: Wordpress Prod Database Security Group
        - Key: Project
          Value: Wordpress Prod

  WordpressProdEFSSecurityGroup:
    Type: AWS: :EC2: :SecurityGroup
    Properties:
      GroupName: Wordpress Prod EFS Security Group
      GroupDescription: Wordpress EFS Security Group
      VpcId: !Ref WordpressProdVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref WordpressProdWebserverSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref WordpressProdSSHSecurityGroup
      Tags:
        - Key: Name
          Value: Wordpress Prod EFS Security Group
        - Key: Project
          Value: Wordpress Prod

  # This resource type is needed to reference self for inbound rule on above resource
  WordpressProdEFSSecurityGroupIngress:
    Type: AWS: :EC2: :SecurityGroupIngress
    Properties:
      GroupId: !Ref WordpressProdEFSSecurityGroup
      IpProtocol: tcp
      FromPort: 2049
      ToPort: 2049
      SourceSecurityGroupId: !Ref WordpressProdEFSSecurityGroup
  # RDS Subnet Group
  WordpressDBSubnetGroup:
    Type: AWS: :RDS: :DBSubnetGroup
    Properties:
      DBSubnetGroupName: Wordpress Prod Database Subnets
      DBSubnetGroupDescription: Wordpress Prod Database Subnets
      SubnetIds:
        - !Ref WordpressProdPrivateDataSubnet1
        - !Ref WordpressProdPrivateDataSubnet2
      Tags:
        - Key: Project
          Value: Wordpress Prod
  # RDS Instance
  RDSDBInstance:
    Type: AWS: :RDS: :DBInstance
    DeletionPolicy: Delete
    Properties:
      AllocatedStorage: 20
      AvailabilityZone: !Select [
  1, !GetAZs ''
]
      BackupRetentionPeriod: 1
      DBInstanceClass: 'db.t2.micro'
      DBInstanceIdentifier: 'wordpress-db'
      DBName: 'wordpress_db'
      DBSubnetGroupName: !Ref WordpressDBSubnetGroup
      Engine: 'mysql'
      EngineVersion: '5.7.39'
      MultiAZ: false
      MasterUsername: !Ref WordpressDBUsername
      MasterUserPassword: !Ref WordpressDBPassword
      PubliclyAccessible: false
      VPCSecurityGroups:
        - !GetAtt WordpressProdDatabaseSecurityGroup.GroupId
      Tags:
        - Key: Project
          Value: Wordpress Prod

  WordpressProdEFS:
    Type: AWS: :EFS: :FileSystem
    Properties:
      Encrypted: false
      FileSystemTags:
        - Key: Name
          Value: Wordpress-Prod-EFS
    DeletionPolicy: Delete

  WordpressProdEFSMount1:
    Type: AWS: :EFS: :MountTarget
    Properties:
      FileSystemId: !Ref WordpressProdEFS
      SecurityGroups:
        - !Ref WordpressProdEFSSecurityGroup
      SubnetId: !Ref WordpressProdPrivateDataSubnet1

  WordpressProdEFSMount2:
    Type: AWS: :EFS: :MountTarget
    Properties:
      FileSystemId: !Ref WordpressProdEFS
      SecurityGroups:
        - !Ref WordpressProdEFSSecurityGroup
      SubnetId: !Ref WordpressProdPrivateDataSubnet2

  EC2InstallInstance:
    Type: AWS: :EC2: :Instance
    DeletionPolicy: Delete
    Properties:
      ImageId:
        Fn: :FindInMap:
          - 'RegionMap'
          - Ref: 'AWS: :Region'
          - 'AMI'
      InstanceType: 't2.micro'
      InstanceInitiatedShutdownBehavior: terminate
      KeyName:
        Fn: :FindInMap:
          - 'RegionMap'
          - Ref: 'AWS: :Region'
          - 'PEM'
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeleteOnTermination: 'true'
          DeviceIndex: '0'
          GroupSet:
            - !Ref WordpressProdALBSecurityGroup
            - !Ref WordpressProdWebserverSecurityGroup
            - !Ref WordpressProdSSHSecurityGroup
          SubnetId: !Ref WordpressProdPublicSubnet1
      Tags:
        - Key: Name
          Value: WordpressProdSetupInstance
      UserData:
        Fn: :Base64: !Sub |
          #!/bin/bash
          sudo su
          yum update -y
          mkdir -p /var/www/html
          mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport ${WordpressProdEFS
}.efs.${AWS: :Region
}.amazonaws.com:/ /var/www/html
          sudo yum install -y httpd httpd-tools mod_ssl
          sudo systemctl enable httpd
          sudo systemctl start httpd
          sudo amazon-linux-extras enable php7.4
          sudo yum clean metadata
          sudo yum install php php-common php-pear -y
          sudo yum install php-{cgi,curl,mbstring,gd,mysqlnd,gettext,json,xml,fpm,intl,zip
} -y
          sudo rpm -Uvh https: //dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm
          sudo rpm --import https: //repo.mysql.com/RPM-GPG-KEY-mysql-2022
          sudo yum install mysql-community-server -y
          sudo systemctl enable mysqld
          sudo systemctl start mysqld
          sudo usermod -a -G apache ec2-user
          sudo chown -R ec2-user:apache /var/www
          sudo chmod 2775 /var/www && find /var/www -type d -exec sudo chmod 2775 {} \;
          sudo find /var/www -type f -exec sudo chmod 0664 {} \;
          chown apache:apache -R /var/www/html
          wget https: //wordpress.org/latest.tar.gz
          tar -xzf latest.tar.gz
          # cp -r wordpress /* /var/www/html/
          # cp /var/www/html/wp-config-sample.php /var/www/html/wp-config.php
          wp core download --path='/var/www/html'

          sudo sed -i 's/database_name_here/wordpress_db/g' /var/www/html/wp-config.php
          sudo sed -i 's/username_here/${WordpressDBUsername}/g' /var/www/html/wp-config.php
          sudo sed -i 's/password_here/${WordpressDBPassword}/g' /var/www/html/wp-config.php
          sudo sed -i 's/localhost/${RDSDBInstance.Endpoint.Address}/g' /var/www/html/wp-config.php
          sudo service httpd restart
          sudo mkdir /var/www/html/wp-content/uploads
          sudo chmod -R 755 /var/www/html/wp-content/uploads
          sudo service httpd restart
          ######### Setup SSL/TLS #########
          echo "
          /* SSL Settings */
          define('FORCE_SSL_ADMIN', true);

          // Get true SSL status from AWS load balancer
          if(isset(\$_SERVER['HTTP_X_FORWARDED_PROTO'
]) && \$_SERVER['HTTP_X_FORWARDED_PROTO'
] === 'https') {
            \$_SERVER['HTTPS'
  ] = '1';
}
          " >> /var/www/html/wp-config.php
          sudo service httpd restart
          ######### WORDPRESS CLI INSTALL HERE #########
          curl -O https: //raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
          chmod +x wp-cli.phar
          sudo mv wp-cli.phar /usr/local/bin/wp

          /opt/aws/bin/cfn-signal -s true '${WaitHandle
}'

    DependsOn:
      - RDSDBInstance
      - WordpressProdEFS
      - WordpressProdEFSMount1
      - WordpressProdEFSMount2

  WaitHandle:
    Type: AWS: :CloudFormation: :WaitConditionHandle
  WaitCondition:
    Type: AWS: :CloudFormation: :WaitCondition
    DependsOn: EC2InstallInstance
    Properties:
      Handle: !Ref WaitHandle
      Timeout: 3600
      Count: 1
  #####################################################################
  WordpressAppLaunchTemplate:
    Type: 'AWS: :EC2: :LaunchTemplate'
    # DependsOn: EC2InstallInstance
    Properties:
      LaunchTemplateName: !Sub '${AWS: :StackName
}-launch-template-for-auto-scaling'
      LaunchTemplateData:
        NetworkInterfaces:
          - DeviceIndex: 0
            Groups:
              - !Ref WordpressProdWebserverSecurityGroup
            DeleteOnTermination: true
        ImageId:
          Fn: :FindInMap:
            - 'RegionMap'
            - Ref: 'AWS: :Region'
            - 'AMI'
        InstanceType: t2.micro
        KeyName:
          Fn: :FindInMap:
            - 'RegionMap'
            - Ref: 'AWS: :Region'
            - 'PEM'
        UserData:
          Fn: :Base64: !Sub |
            #!/bin/bash
            yum update -y
            sudo yum install -y httpd httpd-tools mod_ssl
            sudo systemctl enable httpd
            sudo systemctl start httpd
            sudo amazon-linux-extras enable php7.4
            sudo yum clean metadata
            sudo yum install php php-common php-pear -y
            sudo yum install php-{cgi,curl,mbstring,gd,mysqlnd,gettext,json,xml,fpm,intl,zip
} -y
            sudo rpm -Uvh https: //dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm
            sudo rpm --import https: //repo.mysql.com/RPM-GPG-KEY-mysql-2022
            sudo yum install mysql-community-server -y
            sudo systemctl enable mysqld
            sudo systemctl start mysqld
            echo "${WordpressProdEFS}.efs.${AWS::Region}.amazonaws.com:/ /var/www/html nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 0 0" >> /etc/fstab
            mount -a
            chown apache:apache -R /var/www/html
            sudo service httpd restart

  WordpressProdALBV2:
    Type: AWS: :ElasticLoadBalancingV2: :LoadBalancer
    DependsOn: WordpressProdCert
    Properties:
      Name: WordpressALB
      SecurityGroups:
        - !Ref WordpressProdALBSecurityGroup
      Subnets:
        - !Ref WordpressProdPublicSubnet1
        - !Ref WordpressProdPublicSubnet2
      Tags:
        - Key: Project
          Value: Wordpress Prod
      Type: application

  WordpressTG:
    Type: AWS: :ElasticLoadBalancingV2: :TargetGroup
    DependsOn: WordpressProdALBV2
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 300
      HealthCheckPath: /
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      Name: Wordpress-TG
      Port: 80
      Protocol: HTTP
      ProtocolVersion: HTTP1
      Tags:
        - Key: Project
          Value: Wordpress Prod
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId: !Ref WordpressProdVpc

  WordpressHttpListener:
    Type: 'AWS: :ElasticLoadBalancingV2: :Listener'
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: 443
            # Host: '#{host
}'
            # Path: '/#{path
}'
            # Query: '#{query
}'
            StatusCode: 'HTTP_301'
      LoadBalancerArn: !Ref WordpressProdALBV2
      Port: '80'
      Protocol: HTTP

  WordpressHttpsListener:
    Type: 'AWS: :ElasticLoadBalancingV2: :Listener'
    Properties:
      Certificates:
        - CertificateArn: !Ref WordpressProdCert
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WordpressTG
      LoadBalancerArn: !Ref WordpressProdALBV2
      Port: '443'
      Protocol: HTTPS

  WordpressASG:
    Type: AWS: :AutoScaling: :AutoScalingGroup
    DependsOn:
      - WordpressProdALBV2
      - RDSDBInstance
      - WordpressProdNgw1
      - WordpressProdNgw2
      - WordpressProdEFS
      - WordpressProdEFSMount1
      - WordpressProdEFSMount2
    Properties:
      AutoScalingGroupName: Wordpress-ASG
      HealthCheckGracePeriod: 100
      HealthCheckType: ELB
      LaunchTemplate:
        LaunchTemplateId: !Ref WordpressAppLaunchTemplate
        Version: !GetAtt WordpressAppLaunchTemplate.LatestVersionNumber
      MaxSize: '4'
      MinSize: '1'
      DesiredCapacity: '2'
      TargetGroupARNs:
        - !Ref WordpressTG
      VPCZoneIdentifier:
        - !Ref WordpressProdPrivateAppSubnet1
        - !Ref WordpressProdPrivateAppSubnet2

Outputs:
  WordpressDomainName:
    Description: Domain name where this wordpress stack is attached.
    Value: !Ref WordpressDomainName
  RDSEndpoint:
    Description: Enpoint Address of RDS database
    Value: !GetAtt RDSDBInstance.Endpoint.Address
  EFSFileSystemId:
    Description: Filesystem ID of EFS
    Value: !GetAtt WordpressProdEFS.FileSystemId
  EFSFileSystemArn:
    Description: Filesystem ARN of EFS
    Value: !GetAtt WordpressProdEFS.Arn
